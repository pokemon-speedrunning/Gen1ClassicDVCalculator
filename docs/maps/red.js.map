{"version":3,"sources":["red.js"],"names":["starterStats","nidoran","startingLevel","hp","attack","defense","speed","special","nidoking","runInfo","lastUsefulLevel","statExp","hpdvBits","createDVArray","Array","map","x","i","initialDVs","bit_test","num","bit","allNumbersHaveBit","array","some","noNumbersHaveBit","removeNumbersWithBit","filter","removeNumbersWithoutBit","updatePossibleDVs","possibleDVs","level","parseInt","$","val","starterEvolution","starter","dvType","possibleDVsForType","possibleStats","dv","Math","floor","ceil","sqrt","stat","statList","find","remove","dvList","empty","lowestPossibleDV","highestPossibleDV","length","append","Set","forEach","impossibleDVsThisStat","index","on","thisButton","this","data","includes","value","currentLevel"],"mappings":"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","file":"../js/red.js","sourcesContent":["const starterStats = {\r\n    nidoran: { startingLevel: 1, hp: 46, attack: 57, defense: 40, speed: 50, special: 40 },\r\n    nidoking: { startingLevel: 17, hp: 81, attack: 92, defense: 77, speed: 85, special: 75 }\r\n};\r\nconst runInfo = { startingLevel: 3, lastUsefulLevel: 14}\r\nconst statExp = [\r\n    { hp: 0, attack: 0, defense: 0, speed: 0, special: 0 },\r\n    { hp: 0, attack: 0, defense: 0, speed: 0, special: 0 },\r\n    { hp: 0, attack: 0, defense: 0, speed: 0, special: 0 },\r\n    { hp: 0, attack: 0, defense: 0, speed: 0, special: 0 },\r\n    { hp: 0, attack: 0, defense: 0, speed: 0, special: 0 },\r\n    { hp: 17, attack: 22, defense: 80, speed: 35, special: 15 },\r\n    { hp: 62, attack: 52, defense: 115, speed: 80, special: 35 },\r\n    { hp: 102, attack: 87, defense: 145, speed: 130, special: 55 },\r\n    { hp: 177, attack: 173, defense: 215, speed: 247, special: 100 },\r\n    { hp: 212, attack: 233, defense: 259, speed: 302, special: 140 },\r\n    { hp: 342, attack: 323, defense: 374, speed: 432, special: 205 },\r\n    { hp: 487, attack: 393, defense: 519, speed: 537, special: 275 }\r\n];\r\nconst hpdvBits = [\"special\", \"speed\", \"defense\", \"attack\"];\r\n\r\nfunction createDVArray() {\r\n    return [...Array(16)].map((x, i) => i);\r\n}\r\n\r\nfunction initialDVs() {\r\n    return { hp: createDVArray(), attack: createDVArray(), defense: createDVArray(), speed: createDVArray(), special: createDVArray() }\r\n}\r\n\r\nfunction bit_test(num, bit) {\r\n    return ((num >> bit) % 2 != 0);\r\n}\r\n\r\nfunction allNumbersHaveBit(array, bit) {\r\n    return !array.map(num => bit_test(num, bit)).some(x => x === true);\r\n}\r\n\r\nfunction noNumbersHaveBit(array, bit) {\r\n    return !array.map(num => bit_test(num, bit)).some(x => x === false);\r\n}\r\n\r\nfunction removeNumbersWithBit(array, bit) {\r\n    return array.filter(num => !bit_test(num, bit));\r\n}\r\n\r\nfunction removeNumbersWithoutBit(array, bit) {\r\n    return array.filter(num => bit_test(num, bit));\r\n}\r\n\r\nfunction updatePossibleDVs() {\r\n    for (var bit = 0; bit <=3; bit++) {\r\n        //remove DVs incompatible with known HPs\r\n        if (allNumbersHaveBit(possibleDVs[\"hp\"], bit)) {\r\n            possibleDVs[hpdvBits[bit]] = removeNumbersWithBit(possibleDVs[hpdvBits[bit]], 0);\r\n        } else if (noNumbersHaveBit(possibleDVs[\"hp\"], bit)) {\r\n            possibleDVs[hpdvBits[bit]] = removeNumbersWithoutBit(possibleDVs[hpdvBits[bit]], 0);\r\n        }\r\n        //remove HP DVs that are incompatible with other DVs\r\n        if (allNumbersHaveBit(possibleDVs[hpdvBits[bit]], 0)) {\r\n            possibleDVs[\"hp\"] = removeNumbersWithBit(possibleDVs[\"hp\"], bit);\r\n        } else if (noNumbersHaveBit(possibleDVs[hpdvBits[bit]], 0)) {\r\n            possibleDVs[\"hp\"] = removeNumbersWithoutBit(possibleDVs[\"hp\"], bit);\r\n        }\r\n    }\r\n    //repopulate the buttons\r\n    let level = parseInt($('#level').val());\r\n    let starterEvolution = \"\";\r\n    for (starter in starterStats) {\r\n        if (starterStats[starter].startingLevel < level) {\r\n            starterEvolution = starter;\r\n        }\r\n    }\r\n    for (let dvType in possibleDVs) {\r\n        let possibleDVsForType = possibleDVs[dvType];\r\n        let possibleStats = possibleDVsForType.map((dv) => Math.floor(Math.floor((starterStats[starterEvolution][dvType] + dv) * 2 + Math.floor(Math.ceil(Math.sqrt(statExp[level - runInfo.startingLevel][dvType])) / 4)) * level / 100) + 5);\r\n        if (dvType === \"hp\") {\r\n            possibleStats = possibleStats.map((stat) => stat + level + 5);\r\n        }\r\n        let statList = $(`[data-statType=\"${dvType}\"] .btn-group-vertical`);\r\n        statList.find('button').remove();\r\n        let dvList = $(`[data-dvType=\"${dvType}\"]`).find('.dvRange').empty();\r\n        let lowestPossibleDV = possibleDVsForType[0];\r\n        let highestPossibleDV = possibleDVsForType[possibleDVsForType.length-1];\r\n        dvList.append(lowestPossibleDV === highestPossibleDV ? lowestPossibleDV : `${lowestPossibleDV}-${highestPossibleDV}`);\r\n        [...new Set(possibleStats)].forEach(stat => {\r\n            let impossibleDVsThisStat = possibleDVsForType.filter((dv, index) => possibleStats[index] != stat);\r\n            statList.append(`<button class=\"btn btn-primary\" type=\"button\" data-removedvs=\"[${impossibleDVsThisStat}]\" data-dvtype=\"${dvType}\">${stat}</button`);\r\n        });\r\n    }\r\n}\r\n\r\n$('.dvButtons').on('click', 'button', function () {\r\n    let thisButton = $(this);\r\n    let dvType = thisButton.data(\"dvtype\");\r\n    possibleDVs[dvType] = possibleDVs[dvType].filter(dv => !thisButton.data(\"removedvs\").includes(dv));\r\n    updatePossibleDVs();\r\n    //todo: consider eliminating \"impossible\" nidos\r\n});\r\n\r\n$('#level').on('change', function () {\r\n    if (this.value < runInfo.startingLevel) this.value = runInfo.startingLevel;\r\n    if (this.value > runInfo.lastUsefulLevel) this.value = runInfo.lastUsefulLevel;\r\n    updatePossibleDVs();\r\n});\r\n\r\n$('#decrementLevel').on('click', function () {\r\n    let currentLevel = $('#level').val();\r\n    if (currentLevel > runInfo.startingLevel) {\r\n        $('#level').val(--currentLevel);\r\n    }\r\n    updatePossibleDVs();\r\n});\r\n\r\n$('#incrementLevel').on('click', function () {\r\n    let currentLevel = $('#level').val();\r\n    if (currentLevel < runInfo.lastUsefulLevel) {\r\n        $('#level').val(++currentLevel);\r\n    }\r\n    updatePossibleDVs();\r\n});\r\n\r\n$('#reset').on('click', function () {\r\n    possibleDVs = initialDVs();\r\n    $('#level').val(runInfo.startingLevel);\r\n    updatePossibleDVs();\r\n});\r\n\r\nlet possibleDVs = initialDVs();\r\nupdatePossibleDVs();"]}