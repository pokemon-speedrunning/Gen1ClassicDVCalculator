{"version":3,"sources":["main.js"],"names":["gameSpecificCycleCounts","RB","reroll1","reroll2","Y","click","actualSuccesses","pokemon","JSON","parse","$","val","parseInt","currentHPPercent","Math","max","status","roll2Cycles","game","intendedRate","includes","name","level","hpDV","maxHP","baseHP","hpFactor","ball","ballFactor","currentHPModifier","min","reroll1Cycles","catchRate","ballRerollCutoff","reroll2Cycles","initialRNGByte","initialDividerWord","currentDividerWord","currentRNGByte","catchMon","setRateBar","progressBarClass","percent","progressBar","concat","css","attr","html","toFixed"],"mappings":"aAAA,IAAIA,wBAA0B,CAACC,GAAI,CAAEC,QAAS,IAAKC,QAAS,KACxDC,EAAG,CAAEF,QAAS,IAAKC,QAAS,MAD5BH,YAAAA,MAAiCE,EAAAA,UAAOG,MAAT,WAAgBF,IAAAA,EAAS,EAA9BG,EAAA,EACvBC,EAAAC,KAAAC,MAAAC,EAAA,YAAAC,OAAET,EAASM,KAAXC,MAAAC,EAAA,SAAAC,OAAgBR,EAASS,SAAAF,EAAA,UAAAC,OAAzBE,EAAAC,KAAAC,IAAAH,SAAAF,EAAA,YAAAC,OAAA,GADPK,EAAAN,EAAA,WAAAC,MAEIM,EAAWP,EAAA,SAAfC,MAEA,OAAEO,GACMC,CAAAA,YAAJ,aAAAC,SAAAb,EAAAc,QACIf,EAAAA,UAAJ,IAMA,IAHA,IAAIgB,EAAkBtB,wBAAtBkB,GAAAhB,QACIW,EAAgBb,wBAAuBkB,GAAAf,QAEhCO,EAAE,EAAFa,EAAX,GAAAA,IAAA,CAUI,IAAIC,GAAoC,GAAzBjB,EAAQkB,OAASF,GAAYD,EAAQ,KAAQ,GAAKA,EAAQ,GATrEI,EAAW,IAAAF,EAAAG,EAAAC,YAAA,EACVC,GAA0BT,GAASb,EAAe,MAAA,GAAA,GAAA,EACnD,EAAAA,IACHmB,EAAAA,EAAAG,GAAA,GAYDH,EAAWZ,KAAKgB,IAAIJ,EAAU,KAV9BK,GAAgB/B,EAAAA,EAAAA,iBAA8BE,KAAlD4B,IAAAvB,EAAAyB,UAAA,EAAAL,EAAAM,iBAAAjB,GAAAW,EAAAM,kBAAAP,EAAA,GAAA,IACIQ,IAAAA,IAAAA,EAAgBlC,EAAAA,EAA8BG,IAAlDgC,IAYQ,GAAIA,EAAiBnB,EAVhBV,GAAiBiB,WAEd,IAAMC,IAAKY,EAAeR,EAAtBQ,EAAhB,MAAAA,GAAA,EAAA,CAGgBV,IAFZG,IAAAA,GAA4B,EAYhBQ,EAAqBD,EAXjCP,EAAuBM,IAeX,GAbfG,EAAAA,GAAAD,IAAA,GAAA,IAamBV,EAAKzB,SAA4B,IAAjBoC,EAZhBZ,EAApBW,EAAAN,EAAA,UAeqB,CAAA,KAAIJ,EAAKxB,SAA4B,IAAjBmC,GAXd,MAFJD,EAAuBA,EAA9CH,EAAqE,MAMrDG,GAAqBD,EAAAA,YAEtBG,GAcCD,EAAkBA,IAflBA,EAAJD,EAAApB,YAAA,SAe+D,GAAM,MAdlES,GAiBHpB,GAAmBiC,EAAW,EAAI,GAT1B,SAAAC,EAAAC,EAAAC,GACH,IAAAC,EAAAjC,EAAA,IAAAkC,OAAAH,IACJE,EACME,IAXP,QAUC,GAAAD,OAVDF,EAUC,MAVDI,KAAA,gBAAAJ,GA0BZhC,EAAC,IAAAkC,OAAKH,IAAoBM,KAA1B,GAAAH,OAAkCF,EAAlC,MAdYC,EAAIL,GAAAA,UAAJ,gBAAAM,OAAyC,IAAAF,EAAA,aAAA,aAErCJ,EAAAA,aAAkBA,WAAAA,EAAkBD,WAAkBW,QAAW,IACjET,EAAAA,eAAWD,WAAkBZ,IAAAA,EAA7B,IAAAsB,QAAA","file":"../js/main.js","sourcesContent":["var gameSpecificCycleCounts = {RB: { reroll1: 520, reroll2: 564},\r\n    Y: { reroll1: 516, reroll2: 560}}\r\nvar roll2Cycles = 23664;\r\n\r\n$('button').click(function () {\r\n    var intendedRate = 0;\r\n    var actualSuccesses = 0;\r\n    var pokemon = JSON.parse($('#species').val());\r\n    var ball = JSON.parse($('#ball').val());\r\n    var level = parseInt($('#level').val());\r\n    var currentHPPercent = Math.max(parseInt($('#hpRange').val()), 1);\r\n    var status = $('#status').val();\r\n    var game = $('#game').val();\r\n    if (game === \"RB\") {\r\n        if ([\"DRAGONAIR\", \"DRAGONITE\"].includes(pokemon.name)) {\r\n            pokemon.catchRate = 45;\r\n        }\r\n    }\r\n    var reroll1Cycles = gameSpecificCycleCounts[game].reroll1;\r\n    var reroll2Cycles = gameSpecificCycleCounts[game].reroll2;\r\n\r\n    for (var hpDV = 0; hpDV < 16; hpDV++) {\r\n        var maxHP = (((pokemon.baseHP + hpDV) * 2 * level / 100) >> 0) + level + 10;\r\n        var hpFactor = (((maxHP * 255) / ball.ballFactor) >> 0);\r\n        var currentHPModifier = (((maxHP * (currentHPPercent / 100)) >> 0) / 4) >> 0;\r\n        if (currentHPModifier > 0) {\r\n            hpFactor = (hpFactor / currentHPModifier) >> 0;\r\n        }\r\n        hpFactor = Math.min(hpFactor, 255);\r\n        intendedRate += status / ball.ballRerollCutoff + Math.min(pokemon.catchRate + 1, ball.ballRerollCutoff - status) / ball.ballRerollCutoff * (hpFactor + 1) / 256;\r\n        for (var initialRNGByte = 0; initialRNGByte < 256; initialRNGByte++) {\r\n            if (initialRNGByte < status) {\r\n                actualSuccesses += 16384;\r\n            } else {\r\n                for (var initialDividerWord = 0; initialDividerWord < 65536; initialDividerWord += 4) {\r\n                    var catchMon = false;\r\n                    var currentDividerWord = initialDividerWord;\r\n                    var currentRNGByte = initialRNGByte;\r\n                    do {\r\n                        currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                        if (ball.reroll1 && currentRNGByte > 200) {\r\n                            currentDividerWord = (currentDividerWord + reroll1Cycles) & 0xFFFF;\r\n                        }\r\n                        else if (ball.reroll2 && currentRNGByte > 150) {\r\n                            currentDividerWord = (currentDividerWord + reroll2Cycles) & 0xFFFF;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    while (true);\r\n                    if (currentRNGByte <= pokemon.catchRate) {\r\n                        currentDividerWord = (currentDividerWord + roll2Cycles) & 0xFFFF;\r\n                        currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                        catchMon = currentRNGByte <= hpFactor;\r\n                    }\r\n                    actualSuccesses += catchMon ? 1 : 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setRateBar(progressBarClass, percent) {\r\n        var progressBar = $(`#${progressBarClass}`);\r\n        progressBar.css(\"width\", `${percent}%`).attr(\"aria-valuenow\", percent);\r\n        $(`.${progressBarClass}`).html(`${percent}%`);\r\n        progressBar[0].className = `progress-bar ${percent >= 50 ? 'bg-success' : 'bg-danger'}`\r\n    }\r\n    setRateBar('actualRate', parseFloat(actualSuccesses / 671088.64).toFixed(2));\r\n    setRateBar('intendedRate', parseFloat(100 * intendedRate / 16).toFixed(2));\r\n});"]}