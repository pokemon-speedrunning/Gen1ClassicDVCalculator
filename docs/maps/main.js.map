{"version":3,"sources":["main.js"],"names":["stats","nidoran","hp","attack","defense","speed","special","nidoking","statExp","dvBits","createDVArray","Array","map","x","i","initialDVs","possibleDVs","bit_test","num","bit","allNumbersHaveBit","array","some","noNumbersHaveBit","removeNumbersWithBit","filter","removeNumbersWithoutBit","updatePossibleDVs","level","parseInt","$","val","nidoEvolution","dvType","possibleDVsForType","possibleStats","dv","Math","floor","ceil","sqrt","stat","dvList","find","remove","Set","forEach","lowDV","indexOf","highDV","lastIndexOf","dvRange","impossibleDVsThisStat","index","append","on","thisButton","this","data","includes","value"],"mappings":"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","file":"../js/main.js","sourcesContent":["const stats = {\r\n    nidoran: { hp: 46, attack: 57, defense: 40, speed: 50, special: 40 },\r\n    nidoking: { hp: 81, attack: 92, defense: 77, speed: 85, special: 75 }\r\n};\r\nconst statExp = [\r\n    { hp: 0, attack: 0, defense: 0, speed: 0, special: 0 },\r\n    { hp: 45, attack: 30, defense: 35, speed: 45, special: 20 },\r\n    { hp: 90, attack: 60, defense: 70, speed: 90, special: 40 },\r\n    { hp: 135, attack: 90, defense: 105, speed: 135, special: 60 },\r\n    { hp: 230, attack: 140, defense: 195, speed: 210, special: 105 },\r\n    { hp: 240, attack: 195, defense: 220, speed: 305, special: 150 },\r\n    { hp: 290, attack: 270, defense: 305, speed: 345, special: 180 },\r\n    { hp: 365, attack: 395, defense: 565, speed: 435, special: 240 },\r\n    { hp: 450, attack: 460, defense: 630, speed: 530, special: 280 },\r\n    { hp: 560, attack: 606, defense: 744, speed: 702, special: 365 },\r\n    { hp: 740, attack: 716, defense: 914, speed: 862, special: 455 },\r\n    { hp: 955, attack: 876, defense: 1104, speed: 1062, special: 595 },\r\n    { hp: 1030, attack: 1001, defense: 1243, speed: 1152, special: 695 },\r\n    { hp: 1150, attack: 1171, defense: 1403, speed: 1347, special: 826 },\r\n    { hp: 1330, attack: 1387, defense: 1608, speed: 1559, special: 966 },\r\n    { hp: 1570, attack: 1675, defense: 1844, speed: 1888, special: 1166 },\r\n    { hp: 1570, attack: 1675, defense: 1844, speed: 1888, special: 1166 },\r\n    { hp: 1570, attack: 1675, defense: 1844, speed: 1888, special: 1166 }\r\n];\r\nconst dvBits = [\"special\", \"speed\", \"defense\", \"attack\"];\r\nfunction createDVArray() {\r\n    return [...Array(16)].map((x, i) => i);\r\n}\r\nfunction initialDVs() {\r\n    return { hp: createDVArray(), attack: createDVArray(), defense: createDVArray(), speed: createDVArray(), special: createDVArray() }\r\n}\r\nlet possibleDVs = initialDVs();\r\n\r\nfunction bit_test(num, bit) {\r\n    return ((num >> bit) % 2 != 0);\r\n}\r\n\r\nfunction allNumbersHaveBit(array, bit) {\r\n    return !array.map(num => bit_test(num, bit)).some(x => x === true);\r\n}\r\n\r\nfunction noNumbersHaveBit(array, bit) {\r\n    return !array.map(num => bit_test(num, bit)).some(x => x === false);\r\n}\r\n\r\nfunction removeNumbersWithBit(array, bit) {\r\n    return array.filter(num => !bit_test(num, bit));\r\n}\r\n\r\nfunction removeNumbersWithoutBit(array, bit) {\r\n    return array.filter(num => bit_test(num, bit));\r\n}\r\n\r\nfunction updatePossibleDVs() {\r\n    for (var bit = 0; bit <=3; bit++) {\r\n        //remove DVs incompatible with known HPs\r\n        if (allNumbersHaveBit(possibleDVs[\"hp\"], bit)) {\r\n            possibleDVs[dvBits[bit]] = removeNumbersWithBit(possibleDVs[dvBits[bit]], 0);\r\n        } else if (noNumbersHaveBit(possibleDVs[\"hp\"], bit)) {\r\n            possibleDVs[dvBits[bit]] = removeNumbersWithoutBit(possibleDVs[dvBits[bit]], 0);\r\n        }\r\n        //remove HP DVs that are incompatible with other DVs\r\n        if (allNumbersHaveBit(possibleDVs[dvBits[bit]], 0)) {\r\n            possibleDVs[\"hp\"] = removeNumbersWithBit(possibleDVs[\"hp\"], bit);\r\n        } else if (noNumbersHaveBit(possibleDVs[dvBits[bit]], 0)) {\r\n            possibleDVs[\"hp\"] = removeNumbersWithoutBit(possibleDVs[\"hp\"], bit);\r\n        }\r\n    }\r\n    //repopulate the buttons\r\n    let level = parseInt($('#level').val());\r\n    let nidoEvolution = level < 17 ? \"nidoran\" : \"nidoking\";\r\n    for (let dvType in possibleDVs) {\r\n        let possibleDVsForType = possibleDVs[dvType];\r\n        let possibleStats = possibleDVsForType.map((dv) => Math.floor(Math.floor((stats[nidoEvolution][dvType] + dv) * 2 + Math.floor(Math.ceil(Math.sqrt(statExp[level - 6][dvType])) / 4)) * level / 100) + 5);\r\n        if (dvType === \"hp\") {\r\n            possibleStats = possibleStats.map((stat) => stat + level + 5);\r\n        }\r\n        let dvList = $(`[data-dvtype=\"${dvType}\"]`);\r\n        dvList.find('.form-row').remove();\r\n        [...new Set(possibleStats)].forEach(stat => {\r\n            let lowDV = possibleDVsForType[possibleStats.indexOf(stat)];\r\n            let highDV = possibleDVsForType[possibleStats.lastIndexOf(stat)];\r\n            let dvRange = lowDV === highDV ? highDV : `${lowDV}-${highDV}`;\r\n            let impossibleDVsThisStat = possibleDVsForType.filter((dv, index) => possibleStats[index] != stat);\r\n            dvList.append(`<div class=\"form-row form-group\"><label class=\"col-form-label col-md-6 text-center\" for=\"${dvRange}\">${dvRange}</label><button class=\"form-control col-md-6 btn btn-primary\" type=\"button\" id=\"${dvRange}\" data-removedvs=\"[${impossibleDVsThisStat}]\" data-dvtype=\"${dvType}\">${stat}</button></div>`);\r\n        });\r\n    }\r\n}\r\n\r\nupdatePossibleDVs();\r\n\r\n$('.dvButtons').on('click', 'button', function () {\r\n    let thisButton = $(this);\r\n    let dvType = thisButton.data(\"dvtype\");\r\n    possibleDVs[dvType] = possibleDVs[dvType].filter(dv => !thisButton.data(\"removedvs\").includes(dv));\r\n    updatePossibleDVs();\r\n    //todo: consider eliminating \"impossible\" nidos\r\n});\r\n\r\n$('#level').on('change', function () {\r\n    if (this.value < 6) this.value = 6;\r\n    if (this.value > 23) this.value = 23;\r\n    updatePossibleDVs();\r\n});\r\n$('#reset').on('click', function () {\r\n    possibleDVs = initialDVs();\r\n    $('#level').val(6);\r\n    updatePossibleDVs();\r\n})"]}